@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
   
}
@model string

<style>
    .product:hover{
 border: 2px solid gray;
}
</style>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<div class="productcontainer">
    <div class="title">Get Inspired</div>
    <div class="titledescription">Find the best deals on top-quality products with excellent service. Enjoy a seamless shopping experience with fast delivery and secure payments. Your trusted e-commerce destination for everything you need!</div>
    <div class="filtermenu">
    <div class="filters">
        <div class="filter">
            <div class="filtername">Category</div>
          <div class="dropdown">
                <button class="btn btn-light dropdown-toggle" type="button" id="categoryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    All Categories
                </button>
                <ul class="dropdown-menu" id="categoryList">
                      <li><a class="dropdown-item" href="#">All Categories  </a></li>
                     @*   <li><a class="dropdown-item" href="#">Fashion</a></li>
                        <li><a class="dropdown-item" href="#">Home Appliances</a></li> *@
                </ul>
            </div>
            </div>
            <div class="filter">
                 <div class="filtername"></div>
     <div class="price-filter">
    <label for="priceRange" class="filtername">Price: ₹<span id="priceValue">0</span></label><br>
    <input type="range" id="priceRange" min="0" max="10000" step="100" value="0">
</div>


            </div>
            <div class="filter">
                 <button class="btn btn-primary" type="button" id="setfilter" >
                   Apply
                </button>
            </div>
    </div>
    <div class="sort">
       <div class="filtername">Sort</div>
        <div class="dropdown">
                <button class="btn btn-light dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                   Newest
                </button>
                <ul class="dropdown-menu" id="sortList">
                     <li><a class="dropdown-item" href="#">Relevance</a></li>
                     <li><a class="dropdown-item" href="#">Name (A-Z)</a></li>
                        <li><a class="dropdown-item" href="#">Name (Z-A)</a></li>
                        <li><a class="dropdown-item" href="#">Price (Low - High)</a></li>
                         <li><a class="dropdown-item" href="#">Price (High - Low)</a></li>
                         
                           
                </ul>
            </div>
    </div>
</div>

<div class="productslist1" id="products-container">
@* <div class="product">
   <div class="productimg" onclick="goToProductPage()">
    <img src="images/${product.imageUrl}" alt="${product.productName}">
</div>
<div class="productdata">
    <div class="productcategory">${product.category}</div>
    <div class="producttitle">${product.productName}</div>
    <div class="productprice"><span>Rs: </span><span>${formatPrice(product.price)}</span></div>
</div>
<div class="product-buttons">
    <button>Add to Cart</button>
    <button>Buy Now</button>
</div>
</div> *@
</div>
</div>




<script>
    var data;
    var tempdata;
    var maxprice;
    const categories = document.getElementById('categoryList');  
     const container = document.getElementById('products-container');
    const priceSlider = document.getElementById("priceRange");
    const priceValue = document.getElementById("priceValue");
    const applypricefilter= document.getElementById("setfilter");


    priceSlider.addEventListener("input", function () {
        let value = parseInt(priceSlider.value);
        priceValue.textContent = value; 
    });
    applypricefilter.addEventListener("click", function()
    {var pricechangedata= tempdata;
 @* tempdata =JSON.parse(JSON.stringify(data.products)); *@
        let price =parseInt(priceSlider.value);
         pricechangedata = pricechangedata.filter(product => product.price <= price);
        console.log("Filtered Products:", tempdata);
        console.log(pricechangedata)
        fetchProducts(pricechangedata);
    }
    );

    function setupDropdown(dropdownId, listId) {
        const dropdownButton = document.getElementById(dropdownId);
        const dropdownItems = document.querySelectorAll(`#${listId} .dropdown-item`);

        dropdownItems.forEach(item => {
            item.addEventListener("click", function () {
                dropdownButton.textContent = this.textContent; // Update button text
                
                    filterproducts(this.textContent,listId);
                
            });
        });
    }

    // filtering
async function filterproducts(sortcategory, dropcategory)
{
    try{
        //alert(dropcategory)
      if(dropcategory == "sortList")
      {
        sortfilter(sortcategory);
      }
      else if(dropcategory == "categoryList")
      {

        categoryfilter(sortcategory)
        document.getElementById("sortDropdown").textContent=  "Relevance"
        console.log("category called")
      }
      
    }
    catch(error)
    {
 console.error("Error in fetchProductsbySortList:", error);
    }
}


//sort category
function categoryfilter(category)
{   category= category.trim()
   tempdata =JSON.parse(JSON.stringify(data.products));
  
    if (category !== "All Categories") {
        console.log(category)
        tempdata = tempdata.filter(p => p.category === category);
    }

    console.log("Filtered Products:", tempdata);
    fetchProducts(tempdata);
}

//sort filter
function sortfilter(filtertype)
{
    // Relevance
    // Name (A-Z)
    // Name (Z-A)
    // Price (Low - High)
    // Price (High - Low)
    if(filtertype == "Name (A-Z)")
    {
        tempdata = tempdata.sort((a,b) => a.productName.localeCompare(b.productName))
        console.log(tempdata)
        fetchProducts(tempdata)
        
    }
    else if(filtertype == "Name (Z-A)")
    {
        tempdata = tempdata.sort((a,b) => b.productName.localeCompare(a.productName))
        console.log(tempdata)
       fetchProducts(tempdata) 
    }
    else if(filtertype == "Price (Low - High)")
    {
        tempdata= tempdata.sort((a,b) => a.price - b.price)
        console.log(tempdata)
       fetchProducts(tempdata)
    }
    else if(filtertype == "Price (High - Low)")
    {
        tempdata= tempdata.sort((a,b) => b.price - a.price)
        console.log(tempdata)
        fetchProducts(tempdata)
    }
    else{

        tempdata =JSON.parse(JSON.stringify(data.products));
        console.log(data.products);
        fetchProducts(tempdata)
    }
}

async function fetchdata()
{ var response
       var search = "@Html.Raw(Model)";
    console.log("Search Term:", search);
    if(search==null || search == "")
    {
 response = await fetch('products/getProducts'); 
    }
    else{
     response = await fetch(`products/getProducts?Search=${search}`);    
    }
     // Fetch data from backend
            console.log(response)
          data = await response.json(); // Convert response to JSON
            console.log(data)
            tempdata = JSON.parse(JSON.stringify(data.products));
            getcategories(data);
            fetchProducts(tempdata)

             maxPrice = Math.max(...tempdata.map(p => p.price));
             maxPrice= Math.ceil(maxPrice)
            
            priceSlider.max = maxPrice;
           

              setupDropdown("categoryDropdown", "categoryList");
            setupDropdown("priceDropdown", "priceList");
            setupDropdown("sortDropdown", "sortList");

            //tempdata only contains products
            //data contains full data
}

async function getcategories(data)
{
 data.categories.forEach(category => {
                     //   const categoryname = category.replace(/"/g, '');
                    const categoryhtml =`<li><a class="dropdown-item" href="#">${category}</a></li>`;
                    categories.innerHTML+=categoryhtml
                });
}


async function fetchProducts(data) {
        try {
          
           
            container.innerHTML = ''; // Clear previous content

                
            // Loop through products and generate HTML
            data.forEach(product => {
                const isOutOfStock = product.stock <= 0;
                const productHTML = `
                  <div class="product">
                        <div class="productimg" onclick="goToProductPage(${product.productId})"style="position: relative;">
                            <img src="${product.imageUrl}" alt="${product.productName}" style="opacity: ${isOutOfStock ? 0.5 : 1};">
                              ${isOutOfStock ? `<div class="out-of-stock-label">Out of Stock</div>` : ""}
                        </div>
                        <div class="productdata1">
                            <div class="producttitle1">${product.productName}</div>
                            <div class="productprice"><span>Rs: </span><span>${formatPrice(product.price)}</span></div>
                        </div>
                        <div class="product-buttons">
                           <button class="btn btn-success" onclick="addToCart(${product.productId})" ${isOutOfStock ?  'style="cursor: not-allowed; opacity: 1.0;" disabled' : ""}>Add to Cart</button>
                            @* <button>Buy Now</button> *@
                        </div>
                    </div>
                `;
                container.innerHTML += productHTML;
            });


         

        } catch (error) {
            console.error("Error fetching products:", error);
        }
    }

    function goToProductPage(productId) {
        window.location.href = `products/${productId}`;
    }

    function formatPrice(price) {
        return price.toLocaleString('en-IN'); 
    }

    fetchdata();
    

</script>